import{l as i}from"./log.js";import{w,m as v}from"./client-state.js";const T=()=>{const e=new Audio;return e.src=chrome.runtime.getURL("found.mp3"),e.pause(),{play(){e.currentTime=0,e.play()}}},f=(e,t)=>{if(i("triggerBadgeUpdate",{clientState:e}),e.tabStatus==="processing"){t({type:"action:update-badge",text:e.foundSponsoredTimestamps.length.toString()||"...",color:"blue"});return}if(e.isBlockerEnabled){t({type:"action:update-badge",text:e.foundSponsoredTimestamps.length.toString()||"on",color:"green"});return}else{t({type:"action:update-badge",text:"off",color:"#333"});return}},S=async(e,t,o=3,a)=>{try{return await e()}catch(d){if(o===0)throw d;return await w(t),a&&a(d),i(`Retrying ${o} more times...`),await S(e,t,o-1)}},b=(e,t=1,o=0)=>{const a=n=>n.isSponsoredFound,d=n=>n.endSeconds-n.startSeconds>=t,r=(n,c)=>{const p=n[n.length-1];if(!p)return[{startSeconds:c.startSeconds,endSeconds:c.endSeconds}];if(c.startSeconds-p.endSeconds<=o){const h={startSeconds:p.startSeconds,endSeconds:c.endSeconds};return[...n.slice(0,n.length-1),h]}return[...n,{startSeconds:c.startSeconds,endSeconds:c.endSeconds}]};return e.filter(a).reduce(r,[]).filter(d).map(n=>({startSeconds:n.startSeconds,endSeconds:n.endSeconds}))},k=e=>Math.round(e*100)/100,P=e=>`${k(e.offsetSeconds)}s	${e.text}`,y=e=>`
This is a video transcript with each line in format:

<time in seconds>	<text>

== video transcript chunk start ==

${e}

== video transcript chunk end ==

The video transcript can contain sponsored segments.
Sponsored segments often start with phrases such as "I want to thank our sponsor" or "this video is sponsored by"

Answer the following questions in JSON format:

1. Does this transcript contain sponsored content?
2. If so, when does the sponsored content start?
3. If so, when does the sponsored content end?

Reply in this format (JSON): 
{ "isSponsoredFound": boolean, startSeconds: number, endSeconds: number }
`.trim(),C=async(e,t)=>fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:e}]})}).then(o=>o.json()).catch(o=>(console.error(o),null));async function L(e,t,o){var p,u;const a=y(e),d=await C(a,o);if(!d)return{isSponsoredFound:!1,index:t};const r=(u=(p=d.choices[0])==null?void 0:p.message)==null?void 0:u.content;if(r==="not found")return{isSponsoredFound:!1,index:t};const{isSponsoredFound:s,startSeconds:n,endSeconds:c}=JSON.parse(r);return s?typeof n!="number"||typeof c!="number"?{isSponsoredFound:!1,index:t}:{isSponsoredFound:s,startSeconds:n,endSeconds:c,index:t}:{isSponsoredFound:!1,index:t}}const $=(e,t,o)=>{let a=[],d=0,r=0;const s=t-o;for(;d<e.length;){if(a[r]||(a[r]=""),a[r].length>s){r++;continue}const n=e[d];a[r]=`${a[r]}
${n}`,d++}return a.map(n=>n.trim())},I=async(e,t)=>{const a=4096-y("").length,d=100,r=e.map(P);i("transcriptLines",r.join(`
`));const s=$(r,a,d);return console.time("analyzeChunk"),Promise.all(s.map((n,c)=>(i(`analyzing chunk ${c} of ${s.length}`,{chunk:n}),S(()=>L(n,c,t).then(p=>(i(`analyzed chunk ${c} of ${s.length}`),p)),1e3,3,p=>{i(`analyzing chunk ${c} of ${s.length} failed`,{error:p,chunk:n})})))).then(n=>(console.timeEnd("analyzeChunk"),b(n,30,70)))},F=async()=>{const e=new URL(location.href).searchParams.get("v"),t=await fetch(`https://butter-api-gamma.vercel.app/api/transcriptions?id=${e}`,{mode:"cors"}).then(o=>o.json()).then(({transcript:o})=>o);return i("transcript",t),t},A=(e,t,o)=>{if(!t.length)return()=>{};let a=null;const d=setInterval(()=>{const r=e.currentTime,s=t.find(({startSeconds:n,endSeconds:c})=>r>=n&&r<=c);s&&a!==s&&(a=s,o(s),e.currentTime=s.endSeconds)},500);return()=>clearInterval(d)},z=e=>{let t=location.href,o=setInterval(()=>{location.href!==t&&(t=location.href,e())},1e3);return()=>clearInterval(o)},E=({onTimestampsUpdate:e,onProcessingStart:t,onProcessingError:o,onProcessingComplete:a,onSponsoredTimestampEnter:d})=>{let r=()=>{};return{start:async n=>{const c=async()=>{i("processing current page"),e([]),r();const p=await F(),u=await I(p,n);e(u),i("sponsoredTimestamps",u);const h=document.querySelector("video");if(!h)throw new Error("Cannot find video element");r=A(h,u,g=>{i("onSponsoredTimestampEnter",g),d(g)})};t(),await c().then(a).catch(o),z(()=>{if(i("video changed, processing new page..."),!(location.pathname==="/watch"&&new URL(location.href).searchParams.get("v")))return i("not a video player page, skipping");t(),c().then(a).catch(o)})}}};i("content script loaded");const l=v();let m=!1;f(l.state,e=>{try{chrome.runtime.sendMessage(e)}catch(t){i("Failed to send message to background",{err:t})}});chrome.runtime.onConnect.addListener(e=>{i("Port connected"),m=!0,e.postMessage({type:"content:state:update",state:l.state}),e.onMessage.addListener(t=>{i(`Received message [${t.type}]`,{message:t});const o=T(),a=E({onTimestampsUpdate:s=>{r({foundSponsoredTimestamps:s})},onSponsoredTimestampEnter:()=>{o.play()},onProcessingStart:()=>{r({tabStatus:"processing"})},onProcessingError:s=>{i("Processing error",{error:s})},onProcessingComplete:()=>{r({tabStatus:"idle"})}}),d=s=>{if(!m){i("Port disconnected, ignoring message",{message:s});return}e.postMessage(s)},r=s=>{l.set(s);const n={type:"content:state:update",state:l.state};d(n),f(l.state,c=>{try{chrome.runtime.sendMessage(c)}catch(p){i("Failed to send message to background",{err:p})}})};t.type==="content:enable-blocker"&&(r({isBlockerEnabled:!0}),a.start(t.openAIAPIKey)),t.type==="content:disable-blocker"&&window.location.reload()}),e.onDisconnect.addListener(()=>{m=!1,i("Port disconnected")})});
//# sourceMappingURL=content.js.map
